function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
export function Base(_ref) {
  var _ref$As = _ref.As,
      As = _ref$As === void 0 ? "div" : _ref$As,
      className = _ref.className,
      children = _ref.children,
      grow = _ref.grow,
      basis = _ref.basis,
      shrink = _ref.shrink,
      style = _ref.style,
      flex = _ref.flex,
      rest = _objectWithoutProperties(_ref, ["As", "className", "children", "grow", "basis", "shrink", "style", "flex"]);

  var elementStyle = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, style), grow && {
    flexGrow: grow
  }), basis && {
    flexBasis: basis
  }), shrink && {
    flexShrink: shrink
  }), flex && {
    flex: flex
  });

  return /*#__PURE__*/React.createElement(As, _extends({
    className: className
  }, rest, {
    style: elementStyle
  }), children);
}
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import PropTypes from "prop-types";
import classnames from "classnames";
import { Base } from "./Base";
import "./Flex.css";
/**
 * As a Flex container. Pass continer styles.
 * Will pass Flex child styles onto Base.
 */

export function Flex(_ref) {
  var children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      direction = _ref.direction,
      justifyContent = _ref.justifyContent,
      alignItems = _ref.alignItems,
      wrap = _ref.wrap,
      gap = _ref.gap,
      rest = _objectWithoutProperties(_ref, ["children", "className", "style", "direction", "justifyContent", "alignItems", "wrap", "gap"]);

  var gapContainsNumbers = /[0-9]/.test(gap);
  var classes = classnames("flex", _defineProperty({}, "flex--".concat(gap), !gapContainsNumbers), className);
  return /*#__PURE__*/React.createElement(Base, _extends({}, rest, {
    className: classes,
    style: _objectSpread(_objectSpread({}, style), {}, {
      display: "flex",
      justifyContent: justifyContent,
      flexDirection: direction,
      alignItems: alignItems,
      flexWrap: wrap,
      gap: gap
    })
  }), children);
}
Flex.propTypes = {
  alignItems: PropTypes.oneOf(["stretch", "flex-start", "flex-end", "center"]),
  direction: PropTypes.oneOf(["row", "column", "row-reverse", "column-reverse"]),
  justifyContent: PropTypes.oneOf(["flex-start", "flex-end", "center", "space-between", "space-around", "space-evenly", "normal"]),
  wrap: PropTypes.oneOf(["wrap", "no-wrap", "wrap-reverse"]),
  gap: PropTypes.string
};
export { Flex } from './Flex';
export { Base } from './Base';
